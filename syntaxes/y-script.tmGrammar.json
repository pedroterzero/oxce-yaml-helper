{
  "scopeName": "source.y-script",
  "patterns": [
    {
      "include": "#statements"
    }
  ],
  "repository": {
    "statements": {
      "patterns": [
        {
          "include": "#string"
        },
        {
          "include": "#comment"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#declaration"
        },
        {
          "include": "#control-statement"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#punctuation-semicolon"
        }
      ]
    },
    "var-expr": {
      "name": "meta.var.expr.ys",
      "begin": "^\\s*(var)\\b",
      "beginCaptures": {
        "1": {
          "name": "storage.modifier.ts"
        }
      },
      "end": ";?$",
      "patterns": [
        {
          "include": "#var-type"
        },
        {
          "include": "#var-var"
        },
        {
          "include": "#string"
        }
      ]
    },
    "expression": {
      "name": "meta.expression.ts",
      "patterns": [
        {
          "include": "#expression-operators"
        },
        {
          "include": "#identifiers"
        }
      ]
    },
    "control-statement": {
      "patterns": [
        {
          "name": "keyword.control.flow.ts",
          "match": "(?<!\\.|\\$)\\b(return)\\b(?!\\$)"
        },
        {
          "name": "keyword.control.conditional.ts",
          "match": "(?<!\\.|\\$)\\b(else|if|end)\\b(?!\\$)"
        }
      ]
    },
    "declaration": {
      "name": "meta.declaration.ys",
      "patterns": [
        {
          "include": "#var-expr"
        }
      ]
    },
    "var-type": {
      "name": "meta.var.type.expr.ys",
      "patterns": [
        {
          "name": "support.type.primitive.ys",
          "match": "\\b(int|ptr|ptre|text)\\b"
        }
      ]
    },
    "var-var": {
      "name": "meta.var.var.expr.ys",
      "patterns": [
        {
          "name": "variable.other.readwrite.ts",
          "match": "\\b[a-zA-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "match": "\\b(BA_AIMEDSHOT|BA_AUTOSHOT|BA_HIT|BA_LAUNCH|BA_MINDCONTROL|BA_NONE|BA_PANIC|BA_PRIME|BA_SNAPSHOT|BA_THROW|battle_action_aimshoot|battle_action_autoshoot|battle_action_cqb|battle_action_hit|battle_action_mindcontrol|battle_action_panic|battle_action_snapshot|battle_action_throw|battle_action_use|battle_action_walk|BA_UNPRIME|BA_USE|blit_collapse|blit_item_big|blit_item_floor|blit_item_lefthand|blit_item_righthand|blit_large_propulsion_0|blit_large_propulsion_1|blit_large_propulsion_2|blit_large_propulsion_3|blit_large_torso_0|blit_large_torso_1|blit_large_torso_2|blit_large_torso_3|blit_large_turret|blit_leftarm|blit_legs|blit_rightarm|blit_torso|BODYPART_HEAD|BODYPART_LEFTARM|BODYPART_LEFTLEG|BODYPART_RIGHTARM|BODYPART_RIGHTLEG|BODYPART_TORSO|BT_AMMO|BT_CORPSE|BT_FIREARM|BT_FLARE|BT_GRENADE|BT_MEDIKIT|BT_MELEE|BT_MINDPROBE|BT_NONE|BT_PROXIMITYGRENADE|BT_PSIAMP|BT_SCANNER|COLOR_X1_BLUE0|COLOR_X1_BLUE1|COLOR_X1_BLUE2|COLOR_X1_BROWN0|COLOR_X1_BROWN1|COLOR_X1_BROWN2|COLOR_X1_FACE|COLOR_X1_GRAY|COLOR_X1_GREEN0|COLOR_X1_GREEN1|COLOR_X1_HAIR|COLOR_X1_NULL|COLOR_X1_PURPLE0|COLOR_X1_PURPLE1|COLOR_X1_RED|COLOR_X1_SILVER|COLOR_X1_SPECIAL|COLOR_X1_YELLOW|DETECTION_HYPERWAVE|DETECTION_NONE|DETECTION_RADAR|DIFF_BEGINNER|DIFF_EXPERIENCED|DIFF_GENIUS|DIFF_SUPERHUMAN|DIFF_VETERAN|FACTION_HOSTILE|FACTION_NEUTRAL|FACTION_PLAYER|GENDER_FEMALE|GENDER_MALE|INV_GROUND|INV_HAND|INV_SLOT|LOOK_AFRICAN|LOOK_BLONDE|LOOK_BROWNHAIR|LOOK_ORIENTAL|medikit_action_heal|medikit_action_painkiller|medikit_action_stimulant|move_normal|move_run|move_strafe|SIDE_FRONT|SIDE_LEFT|SIDE_REAR|SIDE_RIGHT|SIDE_UNDER|UFO_CRASHED|UFO_DESTROYED|UFO_FLYING|UFO_LANDED|UNIT_RANK_CAPTAIN|UNIT_RANK_COLONEL|UNIT_RANK_COMMANDER|UNIT_RANK_ROOKIE|UNIT_RANK_SERGEANT|UNIT_RANK_SQUADDIE)\\b",
          "comment": "should maybe go in another place (in example it's support-objects)",
          "_name": "support.function.ts",
          "__name": "support.variable.ts",
          "name": "support.constant.ys"
        },
        {
          "match": "\\b(already_tracked|anim_frame|arc_to_action_unit|arc_to_attacker|attack_strength|base_fly_sound_index|base_tile_sound_index|base_tile_sound_offset|battle_action|blit_part|body_part|bonus|burn|continue_action|current_visibility|currPower|damaging_type|default_visibility|defense_strength|defense_strength_penalty|detection_chance|detection_type|distance|distance_max|distance_strength_reduction|energy_recovery|experience_multipler|experience_type|external_bonuses|final_health_loss|final_mana_loss|fire_density|have_tu|health_loss|health_recovery|hyperwave_max_distance|hyperwave_total_strength|mana_loss|mana_recovery|medikit_action_type|melee_attack_success|morale_recovery|move|new_pixel|old_pixel|orig_power|painkiller_recovery|part|power|psi_attack_success|radar_max_distance|radar_total_strength|reaction_battle_action|reaction_chance|recovery_time|shade|side|smoke_density|sound_index|spend_tu|sprite_index|sprite_offset|stun_recovery|tile_sound_index|to_armor|to_energy|to_health|to_mana|to_morale|to_stun|to_time|to_transform|to_wound|turn|unit_sound_index|walking_phase|wound_recovery)\\b",
          "comment": "should maybe go in another place (in example it's support-objects)",
          "name": "variable.parameter.ts"
        },
        {
          "match": "\\b(debug_log|eq|neq|gt|ge|leabs|add|add_shade|aggregate|bit_and|bit_count|bit_not|bit_or|bit_xor|clear|div|get_color|get_shade|limit|limit_lower|limit_upper|mod|mul|muldiv|offset|offsetmod|pow|set|set_color|set_shade|shl|shr|sub|swap|wavegen_rect|wavegen_saw|wavegen_tri)\\b",
          "comment": "could also be support.function.ts",
          "name": "entity.name.function.ts"
        },
        {
          "match": "\\b(action_target|action_unit|actor|ammo|attacker|battle_game|damaging_item|item|observer_unit|random|reaction_unit|reaction_weapon|rules|save_game|skill|soldier|soldier_bonus|statChange|statPrevious|target|target_unit|ufo|unit|victim|weapon|weapon_item)\\b",
          "comment": "provided objects (could split in ro/rw, ptr/ptre)",
          "name": "variable.other.object.ts"
        },
        {
          "match": "\\bTag(?=\\.)",
          "comment": "Tag",
          "name": "variable.other.object.ts variable.other.tag.ts"
        },
        {
          "match": "(?<=Tag)(\\.)([a-zA-Z0-9_]+)\\b",
          "comment": "tag properties (should do this generically, but I can't tell the difference between functions and properties)",
          "captures": {
						"1": {"name": "punctuation.accessor.ts"},
						"2": {"name": "entity.name.tag.ys"}
					}
        },
        {
					"match": "(\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)(?=\\s|;)",
          "comment": "same as below, but a space follows it (## @TODO this currently also does Tag.XXX_XXX for example which should be a property (above) and not a function)",
          "captures": {
						"1": {
							"name": "punctuation.accessor.ts"
						},
						"2": {
							"name": "entity.name.function.ts"
						}
					}
				},
        {
					"match": "(\\.)\\s*([_$[:alpha:]][_$[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.ts"
						},
						"2": {
							"name": "variable.other.property.ts"
						}
					}
				},
        {
          "match": "(?:([_$[:alpha:]][_$[:alnum:]]*))(?=\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)",
          "captures": {
            "1": {
              "name": "variable.other.object.ts"
            }
          }
        },
        {
          "name": "variable.other.readwrite.ts",
          "match": "[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "expression-operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.ts",
          "match": "(?<=if |else )\\s*(and|or)\\b"
        }
      ]
    },
    "punctuation-semicolon": {
      "name": "punctuation.terminator.statement.ts",
      "match": ";"
    },
    "qstring-double": {
      "name": "string.quoted.double.ts",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ts"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.ts"
        },
        "2": {
          "name": "invalid.illegal.newline.ts"
        }
      },
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
    },
    "string": {
      "patterns": [
        {
          "include": "#qstring-double"
        }
      ]
    },
		"string-character-escape": {
			"name": "constant.character.escape.ts",
			"match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
		},
    "literal": {
      "name": "literal.ts",
      "patterns": [
        {
          "include": "#numeric-literal"
        }
      ]
    },
    "numeric-literal": {
      "patterns": [
        {
          "match": "\\b[0-9]+\\b",
          "name": "constant.numeric.decimal.ts"
        }
      ]
    },
    "comment": {
      "begin": "(?:(^[ \\t]*)|[ \\t]+)(?=#\\p{Print}*$)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.whitespace.comment.leading.ys"
        }
      },
      "end": "(?!\\G)",
      "patterns": [
        {
          "begin": "#",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.ys"
            }
          },
          "end": "\\n",
          "name": "comment.line.number-sign.ys"
        }
      ]
    }
  }
}
